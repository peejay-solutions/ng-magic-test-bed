var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/interfaces/IFactory.html",[0,0.959,1,1.229]],["body/interfaces/IFactory.html",[0,0.265,1,0.599,2,0.591,3,0.34,4,0.206,5,0.265,6,0.275,7,0.445,8,0.407,9,0.775,10,0.775,11,0.775,12,0.44,13,0.486,14,1.903,15,2.124,16,1.042,17,2.283,18,0.44,19,0.591,20,0.34,21,0.101,22,0.862,23,1.168,24,1.592,25,1.042,26,1.809,27,1.471,28,2.936,29,1.397,30,1.397,31,0.591,32,0.591,33,0.591,34,1.042,35,3.542,36,2.124,37,1.397,38,0.34,39,0.34,40,1.765,41,0.34,42,0.265,43,0.591,44,1.104,45,0.34,46,0.34,47,0.591,48,0.627,49,0.591,50,0.591,51,0.44,52,0.44,53,0.599,54,1.124,55,0.44,56,2.671,57,2.769,58,1.397,59,2.671,60,0.591,61,0.591,62,1.042,63,0.591,64,0.591,65,0.591,66,2.902,67,0.591,68,0.591,69,1.042,70,2.468,71,0.591,72,1.039,73,0.591,74,1.701,75,1.684,76,0.591,77,1.042,78,2.119,79,1.684,80,1.684,81,0.591,82,0.591,83,1.576,84,0.591,85,0.591,86,1.104,87,0.591,88,0.591,89,1.576,90,0.591,91,0.591,92,1.921,93,0.591,94,0.591,95,0.591,96,0.591,97,1.042,98,2.119,99,2.594,100,1.576,101,0.591,102,0.591,103,1.042,104,0.591,105,0.775,106,0.591,107,1.397,108,0.627,109,0.591,110,2.857,111,1.701,112,1.042,113,0.591,114,1.986,115,2.433,116,1.398,117,1.903,118,1.398,119,2.367,120,2.433,121,1.986,122,2.56,123,2.433,124,2.433,125,2.433,126,2.433,127,2.778,128,0.591,129,2.288,130,0.591,131,1.042,132,0.591,133,0.591,134,1.042,135,1.642,136,1.397,137,0.591,138,0.591,139,1.042,140,0.591,141,0.591,142,0.591,143,0.591,144,0.591,145,0.591,146,0.591,147,0.591,148,2.671,149,0.591,150,0.591,151,1.684,152,3.632,153,4.076,154,3.826,155,3.705,156,3.071,157,3.358,158,1.684,159,2.119,160,3.277,161,2.56,162,1.921,163,2.56,164,1.765,165,2.857,166,1.684,167,2.56,168,2.671,169,2.671,170,1.809,171,2.119,172,0.591,173,3.428,174,0.591,175,3.006,176,0.591,177,1.684,178,1.921,179,1.684,180,0.591,181,0.591,182,0.591,183,1.684,184,2.288,185,0.591,186,0.591,187,0.591,188,0.591,189,0.775,190,0.591,191,1.042,192,1.042,193,1.397,194,0.591,195,0.591,196,0.591,197,0.591,198,0.591,199,1.042,200,1.042,201,0.591,202,0.591,203,0.591,204,1.042,205,0.591,206,0.968,207,2.119,208,0.591,209,0.591,210,1.397,211,0.591,212,0.591,213,0.591,214,0.591,215,1.397,216,1.042,217,0.591,218,0.591,219,0.775,220,0.033,221,1.397,222,1.042,223,0.591,224,0.591,225,0.591,226,0.591,227,0.591,228,0.591,229,0.44,230,1.042,231,1.042,232,1.397,233,0.591,234,0.591,235,1.397,236,0.44,237,0.591,238,0.591,239,0.591,240,0.591,241,0.591,242,0.591,243,0.591,244,0.591,245,1.042,246,1.042,247,0.591,248,1.042,249,1.397,250,0.591,251,0.591,252,0.591,253,0.591,254,0.591,255,1.042,256,1.042,257,0.591,258,0.591,259,0.591,260,0.591,261,0.591,262,1.471,263,0.44,264,0.591,265,0.599,266,0.591,267,1.921,268,0.591,269,0.803,270,0.44,271,0.591,272,0.591,273,0.775,274,1.042,275,1.042,276,1.042,277,1.042,278,1.397,279,1.252,280,1.039,281,0.591,282,0.591,283,1.701,284,0.591,285,0.591,286,0.591,287,0.591,288,0.591,289,0.591,290,1.042,291,1.042,292,1.042,293,0.591,294,0.591,295,0.591,296,0.591,297,0.34,298,0.591,299,0.591,300,1.684,301,0.591,302,0.591,303,0.591,304,0.591,305,0.591,306,0.591,307,0.591,308,1.397,309,0.591,310,1.042,311,0.591,312,1.042,313,0.591,314,1.042,315,1.042,316,0.591,317,0.591,318,1.042,319,0.591,320,0.591,321,0.591,322,0.591,323,0.44,324,0.591,325,0.44,326,0.591,327,0.34,328,0.599,329,0.34,330,0.34,331,0.34,332,0.34,333,0.34,334,0.591,335,0.591,336,0.44,337,0.44,338,0.591,339,0.44,340,0.024,341,0.014]],["title/modules/NgMagicTetBedModule.html",[116,1.229,342,1.229]],["body/modules/NgMagicTetBedModule.html",[3,1.766,4,1.069,5,1.378,6,0.811,7,0.954,8,0.694,21,0.099,27,1.766,38,1.766,53,1.766,54,1.069,86,1.766,89,2.285,220,0.072,340,0.084,341,0.072,342,2.076,343,1.766,344,3.073,345,3.073,346,3.613,347,2.285]],["title/classes/SpyObserver.html",[48,0.959,54,0.744]],["body/classes/SpyObserver.html",[3,1.052,4,0.637,5,0.821,6,0.965,7,0.965,8,0.73,13,0.637,17,2.417,18,2.645,20,1.052,21,0.1,22,1.703,23,1.192,24,1.72,26,1.361,27,1.052,40,1.97,44,2.291,45,1.052,48,1.158,53,1.052,54,0.637,66,1.92,72,1.92,99,1.361,108,0.821,111,2.225,114,1.361,127,2.944,135,1.052,164,1.484,189,2.225,206,1.484,219,1.361,220,0.043,236,2.225,262,1.484,265,1.484,269,1.97,283,1.361,297,1.052,323,1.361,325,1.361,327,1.484,328,1.868,329,1.484,330,1.484,331,1.484,332,1.484,333,1.484,336,1.361,340,0.06,341,0.043,348,1.361,349,2.718,350,1.361,351,1.83,352,2.582,353,3.927,354,3.25,355,3.427,356,3.25,357,3.25,358,2.582,359,3.25,360,1.83,361,2.582,362,1.83,363,2.718,364,1.361,365,3.556,366,1.83,367,1.83,368,1.83,369,2.417,370,1.83,371,1.83,372,1.83,373,2.582,374,1.83,375,2.582,376,1.83,377,1.83,378,1.83,379,1.83,380,1.83,381,1.83,382,1.83,383,1.83,384,1.83,385,2.992,386,2.582,387,2.582,388,1.83,389,1.83,390,1.83,391,1.83]],["title/coverage.html",[392,2.137]],["body/coverage.html",[0,1.131,1,1.45,5,1.131,6,1.078,7,1.09,8,0.794,9,2.381,10,2.381,11,2.381,12,2.381,21,0.096,23,0.877,39,1.45,41,2.127,42,1.578,46,1.45,48,1.131,54,1.114,55,1.875,105,3.012,108,1.131,220,0.059,337,1.875,340,0.075,341,0.059,349,1.875,350,1.875,392,1.875,393,2.522,394,2.522,395,2.381,396,3.202,397,1.875,398,3.965,399,1.875,400,1.875,401,2.903,402,2.522,403,2.752,404,2.752,405,1.875,406,1.875,407,1.875,408,2.522,409,2.522,410,2.522,411,2.522,412,2.522]],["title/dependencies.html",[413,1.808,414,1.471]],["body/dependencies.html",[21,0.099,38,1.713,45,1.713,51,2.638,52,2.638,220,0.07,340,0.083,341,0.07,414,1.713,415,2.98,416,4.14,417,2.98,418,2.98,419,2.98,420,2.98,421,2.98,422,2.98,423,2.98,424,2.98,425,2.98,426,2.98,427,2.98,428,2.98,429,2.98,430,2.98,431,2.98]],["title/miscellaneous/functions.html",[42,1.148,432,0.811]],["body/miscellaneous/functions.html",[4,1.204,6,0.965,7,0.965,8,0.726,13,0.847,14,2.329,15,1.811,20,2.172,21,0.092,22,1.788,23,1.204,24,2.261,39,1.8,40,1.8,41,1.989,42,1.735,44,1.8,46,1.8,70,1.811,74,1.811,164,1.4,170,1.811,206,1.8,220,0.057,262,1.989,265,1.4,269,1.4,270,2.329,273,2.329,279,1.811,280,1.811,327,1.4,328,1.4,329,1.4,330,1.4,331,1.4,332,1.4,333,1.4,339,1.811,340,0.073,341,0.057,363,2.329,364,2.329,400,1.811,401,2.329,403,2.574,404,2.925,405,2.329,406,2.329,407,2.329,432,1.093,433,3.653,434,2.436,435,2.436,436,2.436,437,2.436,438,3.868,439,2.436,440,2.436,441,2.436,442,2.436,443,2.436,444,2.436,445,2.436,446,2.436,447,2.436,448,3.131,449,2.436]],["title/index.html",[13,0.629,450,1.808,451,1.808]],["body/index.html",[4,0.927,8,0.512,21,0.077,22,1.195,36,2.682,108,1.195,117,1.981,118,1.531,119,2.682,121,1.981,220,0.062,229,2.682,263,1.981,340,0.077,341,0.062,452,2.664,453,3.314,454,2.664,455,3.607,456,2.664,457,2.664,458,2.664,459,3.314,460,3.958,461,4.013,462,2.664,463,2.664,464,2.664,465,2.664,466,2.664,467,2.664,468,2.664,469,2.664,470,2.664,471,2.664,472,3.607,473,2.664,474,3.882,475,2.664,476,2.664,477,2.664,478,2.664,479,2.664,480,2.664,481,2.664,482,3.314,483,3.314,484,3.774,485,3.314,486,3.314,487,2.664,488,3.774,489,2.664,490,2.664,491,2.664,492,3.607,493,2.664,494,2.664,495,2.664,496,2.664]],["title/modules.html",[343,1.652]],["body/modules.html",[21,0.088,220,0.077,340,0.088,341,0.077,342,1.883,343,1.883,497,3.277,498,3.277,499,3.277]],["title/overview.html",[500,2.137]],["body/overview.html",[0,1.423,21,0.086,83,2.358,86,1.823,116,2.115,118,1.823,220,0.074,297,2.115,340,0.086,341,0.074,347,2.358,348,2.358,414,1.823,500,2.358,501,3.171,502,3.171,503,3.68,504,3.171,505,3.171]],["title/miscellaneous/variables.html",[432,0.811,506,1.903]],["body/miscellaneous/variables.html",[6,0.831,7,0.831,8,0.605,13,1.095,21,0.093,23,1.095,100,2.341,135,1.809,220,0.074,340,0.086,341,0.074,369,2.341,395,2.341,397,2.725,399,2.725,432,1.412,506,2.341,507,3.664,508,3.148,509,3.148]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"interfaces/IFactory.html":{},"modules/NgMagicTetBedModule.html":{},"classes/SpyObserver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":105,"title":{},"body":{"interfaces/IFactory.html":{},"coverage.html":{}}}],["0.10.2",{"_index":431,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":398,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":410,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":402,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":297,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"overview.html":{}}}],["1.1.10",{"_index":423,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":429,"title":{},"body":{"dependencies.html":{}}}],["14/49",{"_index":409,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":505,"title":{},"body":{"overview.html":{}}}],["2.5.4",{"_index":426,"title":{},"body":{"dependencies.html":{}}}],["28",{"_index":408,"title":{},"body":{"coverage.html":{}}}],["6.5.4",{"_index":427,"title":{},"body":{"dependencies.html":{}}}],["7.0.5",{"_index":457,"title":{},"body":{"index.html":{}}}],["9.0.0",{"_index":416,"title":{},"body":{"dependencies.html":{}}}],["abstracttype",{"_index":35,"title":{},"body":{"interfaces/IFactory.html":{}}}],["accessors",{"_index":358,"title":{},"body":{"classes/SpyObserver.html":{}}}],["add",{"_index":198,"title":{},"body":{"interfaces/IFactory.html":{}}}],["added",{"_index":278,"title":{},"body":{"interfaces/IFactory.html":{}}}],["addition",{"_index":277,"title":{},"body":{"interfaces/IFactory.html":{}}}],["additional",{"_index":280,"title":{},"body":{"interfaces/IFactory.html":{},"miscellaneous/functions.html":{}}}],["angular",{"_index":119,"title":{},"body":{"interfaces/IFactory.html":{},"index.html":{}}}],["angular/animations",{"_index":415,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":417,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":418,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":38,"title":{},"body":{"interfaces/IFactory.html":{},"modules/NgMagicTetBedModule.html":{},"dependencies.html":{}}}],["angular/core/testing",{"_index":33,"title":{},"body":{"interfaces/IFactory.html":{}}}],["angular/forms",{"_index":419,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":51,"title":{},"body":{"interfaces/IFactory.html":{},"dependencies.html":{}}}],["angular/router",{"_index":421,"title":{},"body":{"dependencies.html":{}}}],["another",{"_index":302,"title":{},"body":{"interfaces/IFactory.html":{}}}],["anything",{"_index":265,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"miscellaneous/functions.html":{}}}],["aotsummaries",{"_index":95,"title":{},"body":{"interfaces/IFactory.html":{}}}],["app",{"_index":466,"title":{},"body":{"index.html":{}}}],["args",{"_index":25,"title":{},"body":{"interfaces/IFactory.html":{}}}],["array",{"_index":17,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{}}}],["array's",{"_index":213,"title":{},"body":{"interfaces/IFactory.html":{}}}],["arry",{"_index":209,"title":{},"body":{"interfaces/IFactory.html":{}}}],["artifacts",{"_index":475,"title":{},"body":{"index.html":{}}}],["assertions",{"_index":334,"title":{},"body":{"interfaces/IFactory.html":{}}}],["automatically",{"_index":263,"title":{},"body":{"interfaces/IFactory.html":{},"index.html":{}}}],["available",{"_index":498,"title":{},"body":{"modules.html":{}}}],["avoids",{"_index":441,"title":{},"body":{"miscellaneous/functions.html":{}}}],["become",{"_index":301,"title":{},"body":{"interfaces/IFactory.html":{}}}],["bed.class.ts",{"_index":12,"title":{},"body":{"interfaces/IFactory.html":{},"coverage.html":{}}}],["bed.class.ts:11",{"_index":19,"title":{},"body":{"interfaces/IFactory.html":{}}}],["bed.module.ts",{"_index":345,"title":{},"body":{"modules/NgMagicTetBedModule.html":{}}}],["bed/ng",{"_index":10,"title":{},"body":{"interfaces/IFactory.html":{},"coverage.html":{}}}],["bed/src/karmatest.ts",{"_index":395,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["bed/src/ng",{"_index":344,"title":{},"body":{"modules/NgMagicTetBedModule.html":{}}}],["bed/src/observe/observe.function.ts",{"_index":400,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["bed/src/observe/spy",{"_index":349,"title":{},"body":{"classes/SpyObserver.html":{},"coverage.html":{}}}],["bed/src/spy",{"_index":403,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["bed/src/test",{"_index":9,"title":{},"body":{"interfaces/IFactory.html":{},"coverage.html":{}}}],["before",{"_index":215,"title":{},"body":{"interfaces/IFactory.html":{}}}],["boolean",{"_index":171,"title":{},"body":{"interfaces/IFactory.html":{}}}],["bootstrap",{"_index":502,"title":{},"body":{"overview.html":{}}}],["browse",{"_index":499,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":52,"title":{},"body":{"interfaces/IFactory.html":{},"dependencies.html":{}}}],["build",{"_index":474,"title":{},"body":{"index.html":{}}}],["call",{"_index":75,"title":{},"body":{"interfaces/IFactory.html":{}}}],["called",{"_index":111,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{}}}],["calling",{"_index":78,"title":{},"body":{"interfaces/IFactory.html":{}}}],["cases",{"_index":335,"title":{},"body":{"interfaces/IFactory.html":{}}}],["change",{"_index":468,"title":{},"body":{"index.html":{}}}],["check",{"_index":117,"title":{},"body":{"interfaces/IFactory.html":{},"index.html":{}}}],["class",{"_index":54,"title":{"classes/SpyObserver.html":{}},"body":{"interfaces/IFactory.html":{},"modules/NgMagicTetBedModule.html":{},"classes/SpyObserver.html":{},"coverage.html":{}}}],["classes",{"_index":348,"title":{},"body":{"classes/SpyObserver.html":{},"overview.html":{}}}],["cli",{"_index":455,"title":{},"body":{"index.html":{}}}],["code",{"_index":470,"title":{},"body":{"index.html":{}}}],["compile",{"_index":234,"title":{},"body":{"interfaces/IFactory.html":{}}}],["compiled",{"_index":60,"title":{},"body":{"interfaces/IFactory.html":{}}}],["compiler",{"_index":238,"title":{},"body":{"interfaces/IFactory.html":{}}}],["complete",{"_index":354,"title":{},"body":{"classes/SpyObserver.html":{}}}],["completes",{"_index":378,"title":{},"body":{"classes/SpyObserver.html":{}}}],["compodoc/compodoc",{"_index":422,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":36,"title":{},"body":{"interfaces/IFactory.html":{},"index.html":{}}}],["componentclass",{"_index":184,"title":{},"body":{"interfaces/IFactory.html":{}}}],["componentdebugelements",{"_index":225,"title":{},"body":{"interfaces/IFactory.html":{}}}],["componentdebugelements.foreach(componentdebugelement",{"_index":227,"title":{},"body":{"interfaces/IFactory.html":{}}}],["componentfixture",{"_index":30,"title":{},"body":{"interfaces/IFactory.html":{}}}],["componentfixtureautodetect",{"_index":32,"title":{},"body":{"interfaces/IFactory.html":{}}}],["componentmocks(componentclass",{"_index":218,"title":{},"body":{"interfaces/IFactory.html":{}}}],["componentprovidermock(componentclass",{"_index":186,"title":{},"body":{"interfaces/IFactory.html":{}}}],["componentservicemock>(componentclass",{"_index":183,"title":{},"body":{"interfaces/IFactory.html":{}}}],["config",{"_index":57,"title":{},"body":{"interfaces/IFactory.html":{}}}],["configuration",{"_index":266,"title":{},"body":{"interfaces/IFactory.html":{}}}],["configured",{"_index":58,"title":{},"body":{"interfaces/IFactory.html":{}}}],["configuretestingmodule",{"_index":97,"title":{},"body":{"interfaces/IFactory.html":{}}}],["const",{"_index":219,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{}}}],["constructed",{"_index":71,"title":{},"body":{"interfaces/IFactory.html":{}}}],["constructor",{"_index":360,"title":{},"body":{"classes/SpyObserver.html":{}}}],["constructor(initialconfig",{"_index":81,"title":{},"body":{"interfaces/IFactory.html":{}}}],["constructor(observable",{"_index":361,"title":{},"body":{"classes/SpyObserver.html":{}}}],["contain",{"_index":271,"title":{},"body":{"interfaces/IFactory.html":{}}}],["context",{"_index":397,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["core",{"_index":424,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":392,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":15,"title":{},"body":{"interfaces/IFactory.html":{},"miscellaneous/functions.html":{}}}],["create(...args",{"_index":16,"title":{},"body":{"interfaces/IFactory.html":{}}}],["created",{"_index":206,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"miscellaneous/functions.html":{}}}],["creates",{"_index":261,"title":{},"body":{"interfaces/IFactory.html":{}}}],["creating",{"_index":303,"title":{},"body":{"interfaces/IFactory.html":{}}}],["creation",{"_index":169,"title":{},"body":{"interfaces/IFactory.html":{}}}],["declaration",{"_index":131,"title":{},"body":{"interfaces/IFactory.html":{}}}],["declaration(declaration",{"_index":132,"title":{},"body":{"interfaces/IFactory.html":{}}}],["declarations",{"_index":86,"title":{},"body":{"interfaces/IFactory.html":{},"modules/NgMagicTetBedModule.html":{},"overview.html":{}}}],["declarations(declarations",{"_index":128,"title":{},"body":{"interfaces/IFactory.html":{}}}],["declare",{"_index":203,"title":{},"body":{"interfaces/IFactory.html":{}}}],["default",{"_index":135,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":18,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{}}}],["dependencies",{"_index":414,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":312,"title":{},"body":{"interfaces/IFactory.html":{}}}],["description",{"_index":363,"title":{},"body":{"classes/SpyObserver.html":{},"miscellaneous/functions.html":{}}}],["dev",{"_index":463,"title":{},"body":{"index.html":{}}}],["development",{"_index":458,"title":{},"body":{"index.html":{}}}],["directive",{"_index":177,"title":{},"body":{"interfaces/IFactory.html":{}}}],["directiveclass",{"_index":178,"title":{},"body":{"interfaces/IFactory.html":{}}}],["directivemocks(directiveclass",{"_index":201,"title":{},"body":{"interfaces/IFactory.html":{}}}],["directiveprovidermock(directiveclass",{"_index":181,"title":{},"body":{"interfaces/IFactory.html":{}}}],["directiveservicemock>(directiveclass",{"_index":179,"title":{},"body":{"interfaces/IFactory.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":473,"title":{},"body":{"index.html":{}}}],["directory",{"_index":478,"title":{},"body":{"index.html":{}}}],["disabled",{"_index":136,"title":{},"body":{"interfaces/IFactory.html":{}}}],["disablenoerrorschema",{"_index":235,"title":{},"body":{"interfaces/IFactory.html":{}}}],["dist",{"_index":477,"title":{},"body":{"index.html":{}}}],["docs",{"_index":120,"title":{},"body":{"interfaces/IFactory.html":{}}}],["documentation",{"_index":337,"title":{},"body":{"interfaces/IFactory.html":{},"coverage.html":{}}}],["done",{"_index":252,"title":{},"body":{"interfaces/IFactory.html":{}}}],["dontspy",{"_index":155,"title":{},"body":{"interfaces/IFactory.html":{}}}],["dynamic",{"_index":420,"title":{},"body":{"dependencies.html":{}}}],["e.g",{"_index":79,"title":{},"body":{"interfaces/IFactory.html":{}}}],["e2e",{"_index":489,"title":{},"body":{"index.html":{}}}],["each",{"_index":279,"title":{},"body":{"interfaces/IFactory.html":{},"miscellaneous/functions.html":{}}}],["easier",{"_index":330,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"miscellaneous/functions.html":{}}}],["effects",{"_index":444,"title":{},"body":{"miscellaneous/functions.html":{}}}],["emits",{"_index":375,"title":{},"body":{"classes/SpyObserver.html":{}}}],["emitted",{"_index":325,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{}}}],["end",{"_index":488,"title":{},"body":{"index.html":{}}}],["error",{"_index":355,"title":{},"body":{"classes/SpyObserver.html":{}}}],["error('.fixture",{"_index":250,"title":{},"body":{"interfaces/IFactory.html":{}}}],["error('declaration",{"_index":251,"title":{},"body":{"interfaces/IFactory.html":{}}}],["error('the",{"_index":109,"title":{},"body":{"interfaces/IFactory.html":{}}}],["example",{"_index":351,"title":{},"body":{"classes/SpyObserver.html":{}}}],["exceptions",{"_index":240,"title":{},"body":{"interfaces/IFactory.html":{}}}],["execute",{"_index":485,"title":{},"body":{"index.html":{}}}],["executed",{"_index":113,"title":{},"body":{"interfaces/IFactory.html":{}}}],["expect(observer.complete).tohavebeencalled",{"_index":379,"title":{},"body":{"classes/SpyObserver.html":{}}}],["expect(observer.next).tohavebeencalledwith(expectederror",{"_index":377,"title":{},"body":{"classes/SpyObserver.html":{}}}],["expect(observer.next).tohavebeencalledwith(expectedvalue",{"_index":336,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{}}}],["expecttobepreconfiguration",{"_index":106,"title":{},"body":{"interfaces/IFactory.html":{}}}],["export",{"_index":53,"title":{},"body":{"interfaces/IFactory.html":{},"modules/NgMagicTetBedModule.html":{},"classes/SpyObserver.html":{}}}],["exports",{"_index":347,"title":{},"body":{"modules/NgMagicTetBedModule.html":{},"overview.html":{}}}],["extended",{"_index":69,"title":{},"body":{"interfaces/IFactory.html":{}}}],["factory",{"_index":294,"title":{},"body":{"interfaces/IFactory.html":{}}}],["factoryclass",{"_index":290,"title":{},"body":{"interfaces/IFactory.html":{}}}],["factorymock>(factoryclass",{"_index":296,"title":{},"body":{"interfaces/IFactory.html":{}}}],["fails",{"_index":333,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"miscellaneous/functions.html":{}}}],["false",{"_index":59,"title":{},"body":{"interfaces/IFactory.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/IFactory.html":{},"modules/NgMagicTetBedModule.html":{},"classes/SpyObserver.html":{},"coverage.html":{}}}],["files",{"_index":469,"title":{},"body":{"index.html":{}}}],["final",{"_index":73,"title":{},"body":{"interfaces/IFactory.html":{}}}],["finds",{"_index":321,"title":{},"body":{"interfaces/IFactory.html":{}}}],["first",{"_index":291,"title":{},"body":{"interfaces/IFactory.html":{}}}],["fixture",{"_index":110,"title":{},"body":{"interfaces/IFactory.html":{}}}],["fixture(componentclass",{"_index":247,"title":{},"body":{"interfaces/IFactory.html":{}}}],["fixtureinstance",{"_index":64,"title":{},"body":{"interfaces/IFactory.html":{}}}],["fixturejobs",{"_index":63,"title":{},"body":{"interfaces/IFactory.html":{}}}],["flag",{"_index":480,"title":{},"body":{"index.html":{}}}],["found",{"_index":210,"title":{},"body":{"interfaces/IFactory.html":{}}}],["function",{"_index":401,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":42,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/IFactory.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions/spy",{"_index":41,"title":{},"body":{"interfaces/IFactory.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["further",{"_index":491,"title":{},"body":{"index.html":{}}}],["generate",{"_index":472,"title":{},"body":{"index.html":{}}}],["generated",{"_index":454,"title":{},"body":{"index.html":{}}}],["getlatest",{"_index":371,"title":{},"body":{"classes/SpyObserver.html":{}}}],["getmethodkeysfromobject",{"_index":406,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getmethodkeysfromobject(obj",{"_index":435,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getting",{"_index":450,"title":{"index.html":{}},"body":{}}],["given",{"_index":283,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{}}}],["go",{"_index":493,"title":{},"body":{"index.html":{}}}],["graph",{"_index":497,"title":{},"body":{"modules.html":{}}}],["help",{"_index":492,"title":{},"body":{"index.html":{}}}],["http://localhost:4200",{"_index":465,"title":{},"body":{"index.html":{}}}],["https://angular.io/api/core/testing/testbed#configuretestingmodule",{"_index":125,"title":{},"body":{"interfaces/IFactory.html":{}}}],["https://angular.io/api/core/testing/testmodulemetadata",{"_index":126,"title":{},"body":{"interfaces/IFactory.html":{}}}],["https://angular.io/guide/testing",{"_index":123,"title":{},"body":{"interfaces/IFactory.html":{}}}],["identifier",{"_index":393,"title":{},"body":{"coverage.html":{}}}],["ifactory",{"_index":1,"title":{"interfaces/IFactory.html":{}},"body":{"interfaces/IFactory.html":{},"coverage.html":{}}}],["implement",{"_index":166,"title":{},"body":{"interfaces/IFactory.html":{}}}],["implicitly",{"_index":77,"title":{},"body":{"interfaces/IFactory.html":{}}}],["import",{"_index":27,"title":{},"body":{"interfaces/IFactory.html":{},"modules/NgMagicTetBedModule.html":{},"classes/SpyObserver.html":{}}}],["import(aimport",{"_index":144,"title":{},"body":{"interfaces/IFactory.html":{}}}],["imports",{"_index":89,"title":{},"body":{"interfaces/IFactory.html":{},"modules/NgMagicTetBedModule.html":{}}}],["imports(imports",{"_index":142,"title":{},"body":{"interfaces/IFactory.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/IFactory.html":{},"modules/NgMagicTetBedModule.html":{},"classes/SpyObserver.html":{}}}],["information",{"_index":122,"title":{},"body":{"interfaces/IFactory.html":{}}}],["inherited",{"_index":440,"title":{},"body":{"miscellaneous/functions.html":{}}}],["initial",{"_index":68,"title":{},"body":{"interfaces/IFactory.html":{}}}],["initialconfig",{"_index":67,"title":{},"body":{"interfaces/IFactory.html":{}}}],["initialconfig.aotsummaries",{"_index":96,"title":{},"body":{"interfaces/IFactory.html":{}}}],["initialconfig.declarations",{"_index":87,"title":{},"body":{"interfaces/IFactory.html":{}}}],["initialconfig.declarations.slice",{"_index":88,"title":{},"body":{"interfaces/IFactory.html":{}}}],["initialconfig.imports",{"_index":90,"title":{},"body":{"interfaces/IFactory.html":{}}}],["initialconfig.imports.slice",{"_index":91,"title":{},"body":{"interfaces/IFactory.html":{}}}],["initialconfig.providers",{"_index":84,"title":{},"body":{"interfaces/IFactory.html":{}}}],["initialconfig.providers.slice",{"_index":85,"title":{},"body":{"interfaces/IFactory.html":{}}}],["initialconfig.schemas",{"_index":93,"title":{},"body":{"interfaces/IFactory.html":{}}}],["initialconfig.schemas.slice",{"_index":94,"title":{},"body":{"interfaces/IFactory.html":{}}}],["initialinputs",{"_index":248,"title":{},"body":{"interfaces/IFactory.html":{}}}],["initialized",{"_index":217,"title":{},"body":{"interfaces/IFactory.html":{}}}],["inject",{"_index":318,"title":{},"body":{"interfaces/IFactory.html":{}}}],["injection",{"_index":80,"title":{},"body":{"interfaces/IFactory.html":{}}}],["injection(service",{"_index":307,"title":{},"body":{"interfaces/IFactory.html":{}}}],["injection(token",{"_index":310,"title":{},"body":{"interfaces/IFactory.html":{}}}],["inputs",{"_index":243,"title":{},"body":{"interfaces/IFactory.html":{}}}],["inside",{"_index":212,"title":{},"body":{"interfaces/IFactory.html":{}}}],["instance",{"_index":72,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{}}}],["instances",{"_index":207,"title":{},"body":{"interfaces/IFactory.html":{}}}],["instances[index",{"_index":299,"title":{},"body":{"interfaces/IFactory.html":{}}}],["interface",{"_index":0,"title":{"interfaces/IFactory.html":{}},"body":{"interfaces/IFactory.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/IFactory.html":{}}}],["item",{"_index":293,"title":{},"body":{"interfaces/IFactory.html":{}}}],["jasmine",{"_index":269,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"miscellaneous/functions.html":{}}}],["jasmine's",{"_index":275,"title":{},"body":{"interfaces/IFactory.html":{}}}],["jasmine.createspy(prefix",{"_index":385,"title":{},"body":{"classes/SpyObserver.html":{}}}],["jasmine.spy",{"_index":365,"title":{},"body":{"classes/SpyObserver.html":{}}}],["jasmine.spyobj",{"_index":157,"title":{},"body":{"interfaces/IFactory.html":{}}}],["job",{"_index":103,"title":{},"body":{"interfaces/IFactory.html":{}}}],["js",{"_index":425,"title":{},"body":{"dependencies.html":{}}}],["karma",{"_index":487,"title":{},"body":{"index.html":{}}}],["key",{"_index":448,"title":{},"body":{"miscellaneous/functions.html":{}}}],["latest",{"_index":359,"title":{},"body":{"classes/SpyObserver.html":{}}}],["legend",{"_index":501,"title":{},"body":{"overview.html":{}}}],["m",{"_index":154,"title":{},"body":{"interfaces/IFactory.html":{}}}],["m>>this.mock(undefined",{"_index":282,"title":{},"body":{"interfaces/IFactory.html":{}}}],["magic",{"_index":7,"title":{},"body":{"interfaces/IFactory.html":{},"modules/NgMagicTetBedModule.html":{},"classes/SpyObserver.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["make",{"_index":315,"title":{},"body":{"interfaces/IFactory.html":{}}}],["makes",{"_index":329,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"miscellaneous/functions.html":{}}}],["matching",{"_index":340,"title":{},"body":{"interfaces/IFactory.html":{},"modules/NgMagicTetBedModule.html":{},"classes/SpyObserver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["mehtod",{"_index":317,"title":{},"body":{"interfaces/IFactory.html":{}}}],["members",{"_index":214,"title":{},"body":{"interfaces/IFactory.html":{}}}],["metadataoverride",{"_index":31,"title":{},"body":{"interfaces/IFactory.html":{}}}],["method",{"_index":70,"title":{},"body":{"interfaces/IFactory.html":{},"miscellaneous/functions.html":{}}}],["methods",{"_index":14,"title":{},"body":{"interfaces/IFactory.html":{},"miscellaneous/functions.html":{}}}],["miscellaneous",{"_index":432,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":241,"title":{},"body":{"interfaces/IFactory.html":{}}}],["mock",{"_index":153,"title":{},"body":{"interfaces/IFactory.html":{}}}],["mock.create",{"_index":292,"title":{},"body":{"interfaces/IFactory.html":{}}}],["mock>(token",{"_index":305,"title":{},"body":{"interfaces/IFactory.html":{}}}],["mocks",{"_index":165,"title":{},"body":{"interfaces/IFactory.html":{}}}],["module",{"_index":116,"title":{"modules/NgMagicTetBedModule.html":{}},"body":{"interfaces/IFactory.html":{},"overview.html":{}}}],["modules",{"_index":343,"title":{"modules.html":{}},"body":{"modules/NgMagicTetBedModule.html":{},"modules.html":{}}}],["more",{"_index":121,"title":{},"body":{"interfaces/IFactory.html":{},"index.html":{}}}],["name",{"_index":22,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["navigate",{"_index":464,"title":{},"body":{"index.html":{}}}],["needs",{"_index":112,"title":{},"body":{"interfaces/IFactory.html":{}}}],["new",{"_index":108,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":356,"title":{},"body":{"classes/SpyObserver.html":{}}}],["ng",{"_index":461,"title":{},"body":{"index.html":{}}}],["ngmagicsetuptestbed",{"_index":55,"title":{},"body":{"interfaces/IFactory.html":{},"coverage.html":{}}}],["ngmagictestbed",{"_index":232,"title":{},"body":{"interfaces/IFactory.html":{}}}],["ngmagictestbedpresentation",{"_index":452,"title":{},"body":{"index.html":{}}}],["ngmagictetbedmodule",{"_index":342,"title":{"modules/NgMagicTetBedModule.html":{}},"body":{"modules/NgMagicTetBedModule.html":{},"modules.html":{}}}],["ngmodule",{"_index":346,"title":{},"body":{"modules/NgMagicTetBedModule.html":{}}}],["no_error_schema",{"_index":237,"title":{},"body":{"interfaces/IFactory.html":{}}}],["no_errors_schema",{"_index":37,"title":{},"body":{"interfaces/IFactory.html":{}}}],["note",{"_index":134,"title":{},"body":{"interfaces/IFactory.html":{}}}],["npm",{"_index":495,"title":{},"body":{"index.html":{}}}],["null",{"_index":65,"title":{},"body":{"interfaces/IFactory.html":{}}}],["obj",{"_index":436,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":270,"title":{},"body":{"interfaces/IFactory.html":{},"miscellaneous/functions.html":{}}}],["object.assign(this.fixtureinstance.componentinstance",{"_index":258,"title":{},"body":{"interfaces/IFactory.html":{}}}],["objectclass",{"_index":267,"title":{},"body":{"interfaces/IFactory.html":{}}}],["objectmock>(objectclass",{"_index":281,"title":{},"body":{"interfaces/IFactory.html":{}}}],["observable",{"_index":44,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"miscellaneous/functions.html":{}}}],["observable.subscribe(next",{"_index":389,"title":{},"body":{"classes/SpyObserver.html":{}}}],["observations",{"_index":357,"title":{},"body":{"classes/SpyObserver.html":{}}}],["observe",{"_index":46,"title":{},"body":{"interfaces/IFactory.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["observe(observable",{"_index":339,"title":{},"body":{"interfaces/IFactory.html":{},"miscellaneous/functions.html":{}}}],["observe/observe.function",{"_index":47,"title":{},"body":{"interfaces/IFactory.html":{}}}],["observe/spy",{"_index":49,"title":{},"body":{"interfaces/IFactory.html":{}}}],["observer",{"_index":328,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"miscellaneous/functions.html":{}}}],["observer(observable",{"_index":338,"title":{},"body":{"interfaces/IFactory.html":{}}}],["observer.class",{"_index":50,"title":{},"body":{"interfaces/IFactory.html":{}}}],["observer.class.ts",{"_index":350,"title":{},"body":{"classes/SpyObserver.html":{},"coverage.html":{}}}],["observer.class.ts:13",{"_index":368,"title":{},"body":{"classes/SpyObserver.html":{}}}],["observer.class.ts:19",{"_index":367,"title":{},"body":{"classes/SpyObserver.html":{}}}],["observer.class.ts:25",{"_index":366,"title":{},"body":{"classes/SpyObserver.html":{}}}],["observer.class.ts:30",{"_index":370,"title":{},"body":{"classes/SpyObserver.html":{}}}],["observer.class.ts:35",{"_index":372,"title":{},"body":{"classes/SpyObserver.html":{}}}],["observer.class.ts:37",{"_index":362,"title":{},"body":{"classes/SpyObserver.html":{}}}],["of.function",{"_index":43,"title":{},"body":{"interfaces/IFactory.html":{}}}],["of.function.ts",{"_index":404,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["once",{"_index":230,"title":{},"body":{"interfaces/IFactory.html":{}}}],["one",{"_index":295,"title":{},"body":{"interfaces/IFactory.html":{}}}],["onto",{"_index":380,"title":{},"body":{"classes/SpyObserver.html":{}}}],["optional",{"_index":24,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":118,"title":{},"body":{"interfaces/IFactory.html":{},"index.html":{},"overview.html":{}}}],["output",{"_index":332,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"miscellaneous/functions.html":{}}}],["overview",{"_index":500,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwritten",{"_index":273,"title":{},"body":{"interfaces/IFactory.html":{},"miscellaneous/functions.html":{}}}],["package",{"_index":413,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":66,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{}}}],["parameter",{"_index":167,"title":{},"body":{"interfaces/IFactory.html":{}}}],["parameters",{"_index":20,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"miscellaneous/functions.html":{}}}],["paramter",{"_index":445,"title":{},"body":{"miscellaneous/functions.html":{}}}],["partial",{"_index":156,"title":{},"body":{"interfaces/IFactory.html":{}}}],["per",{"_index":231,"title":{},"body":{"interfaces/IFactory.html":{}}}],["pipe",{"_index":158,"title":{},"body":{"interfaces/IFactory.html":{}}}],["pipeclass",{"_index":162,"title":{},"body":{"interfaces/IFactory.html":{}}}],["pipeprovidermock(pipeclass",{"_index":174,"title":{},"body":{"interfaces/IFactory.html":{}}}],["pipeservicemock>(pipeclass",{"_index":151,"title":{},"body":{"interfaces/IFactory.html":{}}}],["postconfigurejobs",{"_index":61,"title":{},"body":{"interfaces/IFactory.html":{}}}],["prefix",{"_index":383,"title":{},"body":{"classes/SpyObserver.html":{}}}],["prefixes",{"_index":327,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"miscellaneous/functions.html":{}}}],["prevent",{"_index":168,"title":{},"body":{"interfaces/IFactory.html":{}}}],["prider",{"_index":319,"title":{},"body":{"interfaces/IFactory.html":{}}}],["private",{"_index":56,"title":{},"body":{"interfaces/IFactory.html":{}}}],["prod",{"_index":479,"title":{},"body":{"index.html":{}}}],["production",{"_index":481,"title":{},"body":{"index.html":{}}}],["project",{"_index":453,"title":{},"body":{"index.html":{}}}],["projects/.../karmatest.ts",{"_index":507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../observe.function.ts",{"_index":434,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../spy",{"_index":433,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/ng",{"_index":6,"title":{},"body":{"interfaces/IFactory.html":{},"modules/NgMagicTetBedModule.html":{},"classes/SpyObserver.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["properties",{"_index":352,"title":{},"body":{"classes/SpyObserver.html":{}}}],["prototype",{"_index":170,"title":{},"body":{"interfaces/IFactory.html":{},"miscellaneous/functions.html":{}}}],["prototypes",{"_index":446,"title":{},"body":{"miscellaneous/functions.html":{}}}],["protractor",{"_index":490,"title":{},"body":{"index.html":{}}}],["provide",{"_index":199,"title":{},"body":{"interfaces/IFactory.html":{}}}],["provider",{"_index":148,"title":{},"body":{"interfaces/IFactory.html":{}}}],["provider(provider",{"_index":149,"title":{},"body":{"interfaces/IFactory.html":{}}}],["providermock(token",{"_index":288,"title":{},"body":{"interfaces/IFactory.html":{}}}],["providers",{"_index":83,"title":{},"body":{"interfaces/IFactory.html":{},"overview.html":{}}}],["providers(providers",{"_index":146,"title":{},"body":{"interfaces/IFactory.html":{}}}],["provides",{"_index":159,"title":{},"body":{"interfaces/IFactory.html":{}}}],["provision",{"_index":285,"title":{},"body":{"interfaces/IFactory.html":{}}}],["public",{"_index":127,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{}}}],["pushed",{"_index":114,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{}}}],["read",{"_index":331,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"miscellaneous/functions.html":{}}}],["readme",{"_index":494,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":353,"title":{},"body":{"classes/SpyObserver.html":{}}}],["reference",{"_index":163,"title":{},"body":{"interfaces/IFactory.html":{}}}],["refers",{"_index":381,"title":{},"body":{"classes/SpyObserver.html":{}}}],["register",{"_index":264,"title":{},"body":{"interfaces/IFactory.html":{}}}],["registered",{"_index":286,"title":{},"body":{"interfaces/IFactory.html":{}}}],["reload",{"_index":467,"title":{},"body":{"index.html":{}}}],["require",{"_index":399,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":504,"title":{},"body":{"overview.html":{}}}],["result",{"_index":220,"title":{},"body":{"interfaces/IFactory.html":{},"modules/NgMagicTetBedModule.html":{},"classes/SpyObserver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result.length",{"_index":224,"title":{},"body":{"interfaces/IFactory.html":{}}}],["result.push(componentdebugelement.injector.get(componentclass",{"_index":228,"title":{},"body":{"interfaces/IFactory.html":{}}}],["results",{"_index":341,"title":{},"body":{"interfaces/IFactory.html":{},"modules/NgMagicTetBedModule.html":{},"classes/SpyObserver.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":205,"title":{},"body":{"interfaces/IFactory.html":{}}}],["return",{"_index":99,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{}}}],["returned",{"_index":246,"title":{},"body":{"interfaces/IFactory.html":{}}}],["returns",{"_index":26,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{}}}],["root",{"_index":233,"title":{},"body":{"interfaces/IFactory.html":{}}}],["run",{"_index":460,"title":{},"body":{"index.html":{}}}],["running",{"_index":482,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":45,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"dependencies.html":{}}}],["s",{"_index":308,"title":{},"body":{"interfaces/IFactory.html":{}}}],["scaffolding",{"_index":471,"title":{},"body":{"index.html":{}}}],["schema",{"_index":139,"title":{},"body":{"interfaces/IFactory.html":{}}}],["schema(schema",{"_index":140,"title":{},"body":{"interfaces/IFactory.html":{}}}],["schemametadata",{"_index":34,"title":{},"body":{"interfaces/IFactory.html":{}}}],["schemas",{"_index":92,"title":{},"body":{"interfaces/IFactory.html":{}}}],["schemas(schemas",{"_index":137,"title":{},"body":{"interfaces/IFactory.html":{}}}],["selector",{"_index":204,"title":{},"body":{"interfaces/IFactory.html":{}}}],["serve",{"_index":462,"title":{},"body":{"index.html":{}}}],["server",{"_index":459,"title":{},"body":{"index.html":{}}}],["service",{"_index":160,"title":{},"body":{"interfaces/IFactory.html":{}}}],["serviceclass",{"_index":152,"title":{},"body":{"interfaces/IFactory.html":{}}}],["servicemock>(serviceclass",{"_index":300,"title":{},"body":{"interfaces/IFactory.html":{}}}],["services#angular",{"_index":124,"title":{},"body":{"interfaces/IFactory.html":{}}}],["setup",{"_index":11,"title":{},"body":{"interfaces/IFactory.html":{},"coverage.html":{}}}],["side",{"_index":443,"title":{},"body":{"miscellaneous/functions.html":{}}}],["simple",{"_index":268,"title":{},"body":{"interfaces/IFactory.html":{}}}],["something",{"_index":272,"title":{},"body":{"interfaces/IFactory.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/IFactory.html":{},"modules/NgMagicTetBedModule.html":{},"classes/SpyObserver.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["spec\\.ts",{"_index":509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["specific",{"_index":208,"title":{},"body":{"interfaces/IFactory.html":{}}}],["spies",{"_index":262,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"miscellaneous/functions.html":{}}}],["spy",{"_index":40,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"miscellaneous/functions.html":{}}}],["spyobserver",{"_index":48,"title":{"classes/SpyObserver.html":{}},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"coverage.html":{}}}],["spyon",{"_index":276,"title":{},"body":{"interfaces/IFactory.html":{}}}],["spyonfunctionof",{"_index":405,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["spyonfunctionof(target",{"_index":447,"title":{},"body":{"miscellaneous/functions.html":{}}}],["spyonfunctionsof",{"_index":39,"title":{},"body":{"interfaces/IFactory.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["spyonfunctionsof(mock",{"_index":191,"title":{},"body":{"interfaces/IFactory.html":{}}}],["spyonfunctionsof(target",{"_index":437,"title":{},"body":{"miscellaneous/functions.html":{}}}],["spyonownfunctionsof",{"_index":407,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["spyonownfunctionsof(target",{"_index":449,"title":{},"body":{"miscellaneous/functions.html":{}}}],["spysource",{"_index":175,"title":{},"body":{"interfaces/IFactory.html":{}}}],["spysource.prototype",{"_index":192,"title":{},"body":{"interfaces/IFactory.html":{}}}],["spysources",{"_index":287,"title":{},"body":{"interfaces/IFactory.html":{}}}],["standard",{"_index":244,"title":{},"body":{"interfaces/IFactory.html":{}}}],["started",{"_index":451,"title":{"index.html":{}},"body":{}}],["statements",{"_index":394,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":324,"title":{},"body":{"interfaces/IFactory.html":{}}}],["statically",{"_index":211,"title":{},"body":{"interfaces/IFactory.html":{}}}],["step",{"_index":314,"title":{},"body":{"interfaces/IFactory.html":{}}}],["stored",{"_index":476,"title":{},"body":{"index.html":{}}}],["string",{"_index":189,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{}}}],["subscribes",{"_index":323,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{}}}],["sure",{"_index":316,"title":{},"body":{"interfaces/IFactory.html":{}}}],["t",{"_index":373,"title":{},"body":{"classes/SpyObserver.html":{}}}],["table",{"_index":412,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":411,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":438,"title":{},"body":{"miscellaneous/functions.html":{}}}],["target's",{"_index":439,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test",{"_index":8,"title":{},"body":{"interfaces/IFactory.html":{},"modules/NgMagicTetBedModule.html":{},"classes/SpyObserver.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["test:lib",{"_index":496,"title":{},"body":{"index.html":{}}}],["testbed",{"_index":28,"title":{},"body":{"interfaces/IFactory.html":{}}}],["testbed.compilecomponents",{"_index":257,"title":{},"body":{"interfaces/IFactory.html":{}}}],["testbed.configuretestingmodule",{"_index":76,"title":{},"body":{"interfaces/IFactory.html":{}}}],["testbed.configuretestingmodule(this.config",{"_index":101,"title":{},"body":{"interfaces/IFactory.html":{}}}],["testbed.createcomponent(componentclass",{"_index":245,"title":{},"body":{"interfaces/IFactory.html":{}}}],["testbed.get(token",{"_index":322,"title":{},"body":{"interfaces/IFactory.html":{}}}],["testbed[methodname](uithingclass",{"_index":197,"title":{},"body":{"interfaces/IFactory.html":{}}}],["testing",{"_index":115,"title":{},"body":{"interfaces/IFactory.html":{}}}],["testmodulemetadata",{"_index":29,"title":{},"body":{"interfaces/IFactory.html":{}}}],["tests",{"_index":484,"title":{},"body":{"index.html":{}}}],["this.compiled",{"_index":256,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.complete",{"_index":387,"title":{},"body":{"classes/SpyObserver.html":{}}}],["this.componentmocks(directiveclass",{"_index":202,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.componentprovidermock(componentclass",{"_index":185,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.componentprovidermock(directiveclass",{"_index":180,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.componentprovidermock(pipeclass",{"_index":172,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.config",{"_index":82,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.config.declarations.includes(componentclass",{"_index":221,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.config.declarations.includes(uithingclass",{"_index":194,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.config.declarations.push(...declarations",{"_index":130,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.config.declarations.push(componentclass",{"_index":222,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.config.declarations.push(uithingclass",{"_index":195,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.config.imports.push(...imports",{"_index":143,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.config.providers.push",{"_index":306,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.config.providers.push(...providers",{"_index":147,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.config.schemas.includes(no_errors_schema",{"_index":253,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.config.schemas.push(...schemas",{"_index":138,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.config.schemas.push(no_errors_schema",{"_index":254,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.configured",{"_index":98,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.configuretestingmodule",{"_index":255,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.declarations([declaration",{"_index":133,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.error",{"_index":386,"title":{},"body":{"classes/SpyObserver.html":{}}}],["this.expecttobepreconfiguration",{"_index":129,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.fixtureinstance",{"_index":249,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.fixtureinstance.debugelement.queryall(by.directive(componentclass",{"_index":226,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.fixtureinstance.detectchanges",{"_index":259,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.fixturejobs.foreach(job",{"_index":260,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.fixturejobs.push",{"_index":223,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.imports([aimport",{"_index":145,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.mock(factoryclass",{"_index":298,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.mock(serviceclass",{"_index":304,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.mock(token",{"_index":289,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.next",{"_index":384,"title":{},"body":{"classes/SpyObserver.html":{}}}],["this.next(next",{"_index":391,"title":{},"body":{"classes/SpyObserver.html":{}}}],["this.observations",{"_index":388,"title":{},"body":{"classes/SpyObserver.html":{}}}],["this.observations.push(next",{"_index":390,"title":{},"body":{"classes/SpyObserver.html":{}}}],["this.observations[this.observations.length",{"_index":382,"title":{},"body":{"classes/SpyObserver.html":{}}}],["this.postconfigurejobs.foreach(job",{"_index":102,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.postconfigurejobs.length",{"_index":104,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.postconfigurejobs.push",{"_index":196,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.providers([provider",{"_index":150,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.schemas([schema",{"_index":141,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.uithingprovidermock('overridecomponent",{"_index":187,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.uithingprovidermock('overridedirective",{"_index":182,"title":{},"body":{"interfaces/IFactory.html":{}}}],["this.uithingprovidermock('overridepipe",{"_index":176,"title":{},"body":{"interfaces/IFactory.html":{}}}],["through",{"_index":274,"title":{},"body":{"interfaces/IFactory.html":{}}}],["throw",{"_index":107,"title":{},"body":{"interfaces/IFactory.html":{}}}],["throwing",{"_index":239,"title":{},"body":{"interfaces/IFactory.html":{}}}],["throws",{"_index":376,"title":{},"body":{"classes/SpyObserver.html":{}}}],["time",{"_index":216,"title":{},"body":{"interfaces/IFactory.html":{}}}],["token",{"_index":173,"title":{},"body":{"interfaces/IFactory.html":{}}}],["tracks",{"_index":374,"title":{},"body":{"classes/SpyObserver.html":{}}}],["trigger",{"_index":313,"title":{},"body":{"interfaces/IFactory.html":{}}}],["true",{"_index":100,"title":{},"body":{"interfaces/IFactory.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":428,"title":{},"body":{"dependencies.html":{}}}],["tslint:disable",{"_index":309,"title":{},"body":{"interfaces/IFactory.html":{}}}],["tslint:enable",{"_index":311,"title":{},"body":{"interfaces/IFactory.html":{}}}],["type",{"_index":23,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["uithingclass",{"_index":190,"title":{},"body":{"interfaces/IFactory.html":{}}}],["uithingprovidermock(methodname",{"_index":188,"title":{},"body":{"interfaces/IFactory.html":{}}}],["undefined",{"_index":193,"title":{},"body":{"interfaces/IFactory.html":{}}}],["unit",{"_index":483,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":242,"title":{},"body":{"interfaces/IFactory.html":{}}}],["unpleasant",{"_index":442,"title":{},"body":{"miscellaneous/functions.html":{}}}],["use",{"_index":229,"title":{},"body":{"interfaces/IFactory.html":{},"index.html":{}}}],["used",{"_index":74,"title":{},"body":{"interfaces/IFactory.html":{},"miscellaneous/functions.html":{}}}],["uses",{"_index":236,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{}}}],["usevalue",{"_index":200,"title":{},"body":{"interfaces/IFactory.html":{}}}],["using",{"_index":161,"title":{},"body":{"interfaces/IFactory.html":{}}}],["value",{"_index":369,"title":{},"body":{"classes/SpyObserver.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":326,"title":{},"body":{"interfaces/IFactory.html":{}}}],["variable",{"_index":396,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":506,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":456,"title":{},"body":{"index.html":{}}}],["via",{"_index":486,"title":{},"body":{"index.html":{}}}],["void",{"_index":62,"title":{},"body":{"interfaces/IFactory.html":{}}}],["want",{"_index":164,"title":{},"body":{"interfaces/IFactory.html":{},"classes/SpyObserver.html":{},"miscellaneous/functions.html":{}}}],["wanted",{"_index":284,"title":{},"body":{"interfaces/IFactory.html":{}}}],["whatever",{"_index":320,"title":{},"body":{"interfaces/IFactory.html":{}}}],["yes",{"_index":364,"title":{},"body":{"classes/SpyObserver.html":{},"miscellaneous/functions.html":{}}}],["zone.js",{"_index":430,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":503,"title":{},"body":{"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/IFactory.html":{"url":"interfaces/IFactory.html","title":"interface - IFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ng-magic-test-bed/src/test-bed/ng-magic-setup-test-bed.class.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    create\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(...args: Array)\n                \n            \n\n\n            \n                \n                    Defined in projects/ng-magic-test-bed/src/test-bed/ng-magic-setup-test-bed.class.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     I\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { TestBed, TestModuleMetadata, ComponentFixture, MetadataOverride, ComponentFixtureAutoDetect } from '@angular/core/testing';\nimport { SchemaMetadata, Type, AbstractType, Component, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { spyOnFunctionsOf } from '../spy-on-functions/spy-on-functions-of.function';\nimport { Observable } from 'rxjs';\nimport { observe } from '../observe/observe.function';\nimport { SpyObserver } from '../observe/spy-observer.class';\nimport { By } from '@angular/platform-browser';\n\n\nexport interface IFactory {\n    create(...args: Array): I;\n}\n\nexport class NgMagicSetupTestBed {\n\n    private config: TestModuleMetadata;\n    private configured = false;\n    private compiled = false;\n    private postConfigureJobs: Array void> = [];\n    private fixtureJobs: Array void> = [];\n    private fixtureInstance: ComponentFixture = null;\n\n    /**\n    * @param initialConfig  initial config which will be extended by the other method of the\n    * constructed instance. The final config will be used to call TestBed.configureTestingModule implicitly by\n    * calling e.g. .injection()\n    */\n    constructor(initialConfig: TestModuleMetadata = {}) {\n        this.config = {\n            providers: initialConfig.providers ? initialConfig.providers.slice() : [],\n            declarations: initialConfig.declarations ? initialConfig.declarations.slice() : [],\n            imports: initialConfig.imports ? initialConfig.imports.slice() : [],\n            schemas: initialConfig.schemas ? initialConfig.schemas.slice() : [],\n            aotSummaries: initialConfig.aotSummaries\n        };\n    }\n\n    private configureTestingModule() {\n        if (this.configured) {\n            return;\n        }\n        this.configured = true;\n        TestBed.configureTestingModule(this.config);\n        this.postConfigureJobs.forEach(job => job());\n        this.postConfigureJobs.length = 0;\n    }\n\n    private expectToBePreConfiguration() {\n        if (this.configured) {\n            throw new Error('The TestBed has been implicitly configured by calling e.g.' +\n                '\"injection\" or \"fixture\" the method you called needs a not configured TestBed to be executed');\n        }\n    }\n\n    /**\n    * @param declarations declarations will be pushed to the declarations of the testing module config.\n    * check out angular docs for more information\n    * https://angular.io/guide/testing-services#angular-testbed\n    * https://angular.io/api/core/testing/TestBed#configuretestingmodule\n    * https://angular.io/api/core/testing/TestModuleMetadata\n    */\n    public declarations(declarations: Array) {\n        this.expectToBePreConfiguration();\n        this.config.declarations.push(...declarations);\n    }\n\n    /**\n    * @param declaration declaration will be pushed to the declarations of the testing module config.\n    * check out angular docs for more information\n    * https://angular.io/guide/testing-services#angular-testbed\n    * https://angular.io/api/core/testing/TestBed#configuretestingmodule\n    * https://angular.io/api/core/testing/TestModuleMetadata\n    */\n    public declaration(declaration) {\n        this.declarations([declaration]);\n    }\n\n    /**\n    * @param schemas schemas will be pushed to the schemas of the testing module config. Note that the NO_ERRORS_SCHEMA\n    * is pushed by default. This can be disabled when calling .fixture().\n    * check out angular docs for more information\n    * https://angular.io/guide/testing-services#angular-testbed\n    * https://angular.io/api/core/testing/TestBed#configuretestingmodule\n    * https://angular.io/api/core/testing/TestModuleMetadata\n    */\n    public schemas(schemas: Array) {\n        this.expectToBePreConfiguration();\n        this.config.schemas.push(...schemas);\n    }\n\n    /**\n    * @param schema schema will be pushed to the schemas of the testing module config. Note that the NO_ERRORS_SCHEMA\n    * is pushed by default. This can be disabled when calling .fixture().\n    * check out angular docs for more information\n    * https://angular.io/guide/testing-services#angular-testbed\n    * https://angular.io/api/core/testing/TestBed#configuretestingmodule\n    * https://angular.io/api/core/testing/TestModuleMetadata\n    */\n    public schema(schema: SchemaMetadata | any[]) {\n        this.schemas([schema]);\n    }\n\n    /**\n    * @param imports imports will be pushed to the imports of the testing module config.\n    * check out angular docs for more information\n    * https://angular.io/guide/testing-services#angular-testbed\n    * https://angular.io/api/core/testing/TestBed#configuretestingmodule\n    * https://angular.io/api/core/testing/TestModuleMetadata\n    */\n    public imports(imports: any[]) {\n        this.expectToBePreConfiguration();\n        this.config.imports.push(...imports);\n    }\n\n    /**\n    * @param imports import will be pushed to the imports of the testing module config.\n    * check out angular docs for more information\n    * https://angular.io/guide/testing-services#angular-testbed\n    * https://angular.io/api/core/testing/TestBed#configuretestingmodule\n    * https://angular.io/api/core/testing/TestModuleMetadata\n    */\n    public import(aImport: any) {\n        this.imports([aImport]);\n    }\n\n    /**\n    * @param providers providers will be pushed to the providers of the testing module config.\n    * check out angular docs for more information\n    * https://angular.io/guide/testing-services#angular-testbed\n    * https://angular.io/api/core/testing/TestBed#configuretestingmodule\n    * https://angular.io/api/core/testing/TestModuleMetadata\n    */\n    public providers(providers: any[]) {\n        this.expectToBePreConfiguration();\n        this.config.providers.push(...providers);\n    }\n\n    /**\n    * @param provider import will be pushed to the providers of the testing module config.\n    * check out angular docs for more information\n    * https://angular.io/guide/testing-services#angular-testbed\n    * https://angular.io/api/core/testing/TestBed#configuretestingmodule\n    * https://angular.io/api/core/testing/TestModuleMetadata\n    */\n    public provider(provider: any) {\n        this.providers([provider]);\n    }\n\n    public pipeServiceMock>(pipeClass: Type, serviceClass: AbstractType, mock: M,\n        dontSpy: true): Partial & M;\n    public pipeServiceMock>(pipeClass: Type, serviceClass: AbstractType, mock: M):\n        jasmine.SpyObj & M>;\n    public pipeServiceMock>(pipeClass: Type, serviceClass: AbstractType):\n        jasmine.SpyObj>;\n    /**\n    *  If you have pipe that provides a service you can mock it using this method.\n    * @param pipeClass the pipeClass is the reference of the class of your angular pipe.\n    * @param serviceClass the serviceClass is the reference to the class of the service that you want to mock\n    * @param mock the mock mocks the service and should implement a partial of the service class\n    * @param dontSpy optional parameter to prevent the default spy creation on the mock using the prototype of the serviceClass\n    */\n    public pipeServiceMock>(pipeClass: Type, serviceClass: AbstractType,\n        mock?: M, dontSpy?: boolean):\n        Partial & M | jasmine.SpyObj & M> | jasmine.SpyObj> {\n        return this.componentProviderMock(pipeClass, serviceClass, mock, dontSpy, serviceClass);\n    }\n\n   /**\n    *  If you have pipe that provides a provider you can mock it using this method.\n    * @param pipeClass the pipeClass is the reference of the class of your angular pipe.\n    * @param token the provider token that you want to mock\n    * @param mock the mock\n    * @param dontSpy optional parameter to prevent the default spy creation on the mock\n    */\n    public pipeProviderMock(pipeClass: Type, token: any, mock: M, dontSpy = false,\n        spySource?: AbstractType): M {\n        return this.uiThingProviderMock('overridePipe', pipeClass, token, mock, dontSpy, spySource);\n    }\n\n    /**\n    * If you have directive that provides a service you can mock it using this method.\n    * @param directiveClass the directiveClass is the reference of the class of your angular directive.\n    * @param serviceClass the serviceClass is the reference to the class of the service that you want to mock\n    * @param mock the mock mocks the service and should implement a partial of the service class\n    * @param dontSpy optional parameter to prevent the default spy creation on the mock using the prototype of the serviceClass\n    */\n    public directiveServiceMock>(directiveClass: Type, serviceClass: AbstractType, mock: M,\n        dontSpy: true): Partial & M;\n    public directiveServiceMock>(directiveClass: Type, serviceClass: AbstractType, mock: M):\n        jasmine.SpyObj & M>;\n    public directiveServiceMock>(directiveClass: Type, serviceClass: AbstractType):\n        jasmine.SpyObj>;\n    public directiveServiceMock>(directiveClass: Type, serviceClass: AbstractType,\n        mock?: M, dontSpy?: boolean):\n        Partial & M | jasmine.SpyObj & M> | jasmine.SpyObj> {\n        return this.componentProviderMock(directiveClass, serviceClass, mock, dontSpy, serviceClass);\n    }\n\n    /**\n    *  If you have directive that provides a provider you can mock it using this method.\n    * @param directiveClass the directiveClass is the reference of the class of your angular directive.\n    * @param token the provider token that you want to mock\n    * @param mock the mock\n    * @param dontSpy optional parameter to prevent the default spy creation on the mock\n    */\n    public directiveProviderMock(directiveClass: Type, token: any, mock: M, dontSpy = false,\n        spySource?: AbstractType): M {\n        return this.uiThingProviderMock('overrideDirective', directiveClass, token, mock, dontSpy, spySource);\n    }\n\n\n    public componentServiceMock>(componentClass: Type, serviceClass: AbstractType, mock: M,\n        dontSpy: true): Partial & M;\n    public componentServiceMock>(componentClass: Type, serviceClass: AbstractType, mock: M):\n        jasmine.SpyObj & M>;\n    public componentServiceMock>(componentClass: Type, serviceClass: AbstractType):\n        jasmine.SpyObj>;\n    /**\n    *  If you have component that provides a service you can mock it using this method.\n    * @param componentClass the componentClass is the reference of the class of your angular component.\n    * @param serviceClass the serviceClass is the reference to the class of the service that you want to mock\n    * @param mock the mock mocks the service and should implement a partial of the service class\n    * @param dontSpy optional parameter to prevent the default spy creation on the mock using the prototype of the serviceClass\n    */\n    public componentServiceMock>(componentClass: Type, serviceClass: AbstractType,\n        mock?: M, dontSpy?: boolean):\n        Partial & M | jasmine.SpyObj & M> | jasmine.SpyObj> {\n        return this.componentProviderMock(componentClass, serviceClass, mock, dontSpy, serviceClass);\n    }\n\n    /**\n    *  If you have component provides a provider you can mock it using this method.\n    * @param componentClass the componentClass is the reference of the class of your angular component.\n    * @param token the provider token that you want to mock\n    * @param mock the mock\n    * @param dontSpy optional parameter to prevent the default spy creation on the mock\n    */\n    public componentProviderMock(componentClass: Type, token: any, mock: M, dontSpy = false,\n        spySource?: AbstractType): M {\n        return this.uiThingProviderMock('overrideComponent', componentClass, token, mock, dontSpy, spySource);\n    }\n\n    private uiThingProviderMock(methodName: string, uiThingClass: Type, token: any, mock: M, dontSpy = false,\n        spySource?: AbstractType): M {\n        this.expectToBePreConfiguration();\n        if (!dontSpy) {\n            spyOnFunctionsOf(mock, spySource ? spySource.prototype : undefined);\n        }\n        if (!this.config.declarations.includes(uiThingClass)) {\n            this.config.declarations.push(uiThingClass);\n        }\n        this.postConfigureJobs.push(() => {\n            TestBed[methodName](uiThingClass, {\n                add: {\n                    providers: [\n                        { provide: token, useValue: mock }\n                    ]\n                }\n            });\n        });\n        return mock;\n    }\n\n    public directiveMocks(directiveClass: Type): Array {\n        return this.componentMocks(directiveClass);\n    }\n\n    /**\n    *  declare that you want to mock for a selector and retrieve all created component mock instances after fixture\n    * creation.\n    * @param componentClass class of the component that should be used in the fixture for a specific selector you want to mock.\n    * @returns an arry of all component instances that were found statically inside the fixture. The array's members can only be\n    * used after calling .fixture(). Before that time the array is initialized like this:\n    * ['this array can only be used after fixture called'].\n    */\n    public componentMocks(componentClass: Type): Array {\n        const result: Array = ['this array can only be used after fixture called'];\n        this.expectToBePreConfiguration();\n        if (!this.config.declarations.includes(componentClass)) {\n            this.config.declarations.push(componentClass);\n        }\n        this.fixtureJobs.push(() => {\n            result.length = 0;\n            const componentDebugElements = this.fixtureInstance.debugElement.queryAll(By.directive(componentClass));\n            componentDebugElements.forEach(componentDebugElement => result.push(componentDebugElement.injector.get(componentClass)));\n        });\n        return result;\n    }\n\n    /**\n    *  Use this method to create a component fixture. This method may only be called once per NgMagicTestBed instance.\n    * @param componentClass class of the root component you want to compile and create.\n    * @param disableNoErrorSchema by default the NgMagicTestBed uses the NO_ERROR_SCHEMA of angular to prevent the compiler from\n    * throwing exceptions e.g. for missing or unknown inputs.\n    * @returns a component fixture like standard TestBed.createComponent(componentClass) would have returned it.\n    */\n    public fixture(componentClass: Type, initialInputs: Partial = {}, disableNoErrorSchema = false): ComponentFixture {\n        if (this.fixtureInstance) {\n            throw new Error('.fixture can only be called once per NgMagicTestBed instance');\n        }\n        if (!this.config.declarations.includes(componentClass) && this.configured) {\n            throw new Error('Declaration of component needs to be done before you can create the fixture');\n        }\n        if (!this.config.declarations.includes(componentClass) && !this.configured) {\n            this.config.declarations.push(componentClass);\n        }\n        if (!disableNoErrorSchema && !this.config.schemas.includes(NO_ERRORS_SCHEMA)) {\n            this.config.schemas.push(NO_ERRORS_SCHEMA);\n        }\n        if (!this.configured) {\n            this.configureTestingModule();\n        }\n        if (!this.compiled) {\n            this.compiled = true;\n            TestBed.compileComponents();\n        }\n        this.fixtureInstance = TestBed.createComponent(componentClass);\n        Object.assign(this.fixtureInstance.componentInstance, initialInputs);\n        this.fixtureInstance.detectChanges();\n        this.fixtureJobs.forEach(job => job());\n        return this.fixtureInstance;\n    }\n\n    /**\n     *  Creates a mock where all spies are created automatically.\n     * This method does not register anything at the TestBed or its configuration.\n     * @param objectClass This class' prototype will be used to create simple jasmine spies on all methods this class has\n     * @param mock An object that should implement partial of objectClass and contain all methods that you want to return something.\n     * @param dontSpy optional parameter to prevent the default spy creation on the mock.\n     * @returns Your mocks methods will be overwritten with spies that call through to the mocks methods like jasmine's spyOn method.\n     * In addition to that a spy will be added for each additional method that was found on the objectClass' prototype.\n     */\n    public objectMock>(objectClass: AbstractType | undefined, mock: M | any, dontSpy = false):\n        Partial & M | jasmine.SpyObj & M> {\n        return  & M | jasmine.SpyObj & M>>this.mock(undefined, mock, dontSpy, objectClass);\n    }\n\n    /**\n     *  mocks a provider for a given token with a given mock. If wanted your mock can be extended by spies\n     * from a given spySource class.\n     * @param token token for provider provision\n     * @param mock mock that will be registered for the token\n     * @param dontSpy optional parameter to prevent the default spy creation on the mock.\n     * @param spySource for each method in spySources prototype an additional jasmine spy will be created on the mock\n     * @returns Your mocks methods will be overwritten with spies that call through to the mocks methods like jasmine's spyOn method.\n     * In addition to that a spy will be added for each additional method that was found on the objectClass' prototype.\n     */\n    public providerMock(token: any, mock: M, dontSpy: boolean = false, spySource?: AbstractType) {\n        return this.mock(token, mock, dontSpy, spySource);\n    }\n\n      /**\n     *  mocks a service that has a \"create\" method.\n     * @param factoryClass service that has a \"create\" method that you want to mock.\n     * @param instances will be returned by the mock this method return when \"create\" is called.\n     * The first call of mock.create() will return the first item in the instances-array and so on.\n     * @returns a mock for the factory. mock.create will return the one of the given instances every time it is called\n     */\n    public factoryMock>(factoryClass: AbstractType, instances: Array): jasmine.SpyObj> {\n        let index = -1;\n        return this.mock(factoryClass, {\n            create: (...args: any) => {\n                index++;\n                return instances[index];\n            },\n        }, false, factoryClass);\n    }\n\n    public serviceMock>(serviceClass: AbstractType, mock: M,\n        dontSpy: true): Partial & M;\n    public serviceMock>(serviceClass: AbstractType, mock: M):\n        jasmine.SpyObj & M>;\n    public serviceMock>(serviceClass: AbstractType): jasmine.SpyObj>;\n\n    /**\n     *  mocks a service with the given mock\n     * @param serviceClass service that you want to mock\n     * @param mock that should mock the service. All methods on the mock will become spies. For each method on serviceClass'\n     * prototype another spy will be added to the mock.\n     * @param dontSpy optional parameter to prevent the default spy creation on the mock.\n     * @returns the mock after creating some spies on it (if not disabled)\n     */\n    public serviceMock>(serviceClass: AbstractType, mock?: M, dontSpy?: boolean):\n        Partial & M | jasmine.SpyObj & M> | jasmine.SpyObj> {\n        return this.mock(serviceClass, mock, dontSpy, serviceClass);\n    }\n\n    private mock>(token?: any, mock: M = {}, dontSpy?: boolean, spySource?: AbstractType):\n        Partial & M | jasmine.SpyObj & M> | jasmine.SpyObj> {\n        if (!dontSpy) {\n            spyOnFunctionsOf(mock, spySource ? spySource.prototype : undefined);\n        }\n        if (token) {\n            this.expectToBePreConfiguration();\n            this.config.providers.push({\n                useValue: mock,\n                provide: token\n            });\n        }\n        return mock;\n    }\n\n    public injection(service: AbstractType): S;\n    /* tslint:disable */\n    public injection(token: any): S;\n    /* tslint:enable */\n    /**\n     *  return you the service or provider for a given token from the angular dependency injection.\n     * This will trigger the TestBed configureTestingModule step. After this step you can not create any more mocks.\n     * Make sure you create all your mocks before calling this mehtod.\n     * @param serviceClass service that you want to inject\n     * @param token of the prider that you want to inject\n     * @return whatever angular dependency injection finds for your token\n     */\n    public injection(token: AbstractType | any): S {\n        this.configureTestingModule();\n        return TestBed.get(token);\n    }\n\n    /**\n    * \n    * Subscribes to a given observable and spies on its states and emitted values.\n    * @param observable\n    * Observable you want to spy\n    * @param name\n    * Optional name that prefixes all jasmine spies that are created by the observer. This makes it easier to read the\n    * test output if anything fails.\n    * @returns\n    * observer that can be used to make assertions in your test cases e.g.:\n    * expect(observer.next).toHaveBeenCalledWith(expectedValue);\n    * For more information check SpyObserver documentation\n    */\n    public observer(observable: Observable, name?: string): SpyObserver {\n        return observe(observable, name);\n    }\n\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgMagicTetBedModule.html":{"url":"modules/NgMagicTetBedModule.html","title":"module - NgMagicTetBedModule","body":"\n                   \n\n\n\n\n    Modules\n    NgMagicTetBedModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/ng-magic-test-bed/src/ng-magic-test-bed.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [\n  ],\n  exports: []\n})\nexport class NgMagicTetBedModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SpyObserver.html":{"url":"classes/SpyObserver.html","title":"class - SpyObserver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SpyObserver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ng-magic-test-bed/src/observe/spy-observer.class.ts\n        \n\n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                complete\n                            \n                            \n                                    Public\n                                    Readonly\n                                error\n                            \n                            \n                                    Public\n                                    Readonly\n                                next\n                            \n                            \n                                    Public\n                                    Readonly\n                                observations\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    latest\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(observable: Observable, name?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/ng-magic-test-bed/src/observe/spy-observer.class.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        observable\n                                                  \n                                                        \n                                                                    Observable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The observable that you want to spy with this observer instance.\n\n                                                        \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Optional name that prefixes all jasmine spies that are created by the observer. This makes it easier to read the\ntest output if anything fails.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            complete\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     jasmine.Spy\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ng-magic-test-bed/src/observe/spy-observer.class.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            error\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     jasmine.Spy\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ng-magic-test-bed/src/observe/spy-observer.class.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            next\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     jasmine.Spy\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ng-magic-test-bed/src/observe/spy-observer.class.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            observations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/ng-magic-test-bed/src/observe/spy-observer.class.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        latest\n                    \n                \n\n                \n                    \n                        getlatest()\n                    \n                \n                            \n                                \n                                    Defined in projects/ng-magic-test-bed/src/observe/spy-observer.class.ts:35\n                                \n                            \n                    \n                        \n\n                                \n                                \n                                \n                                    Returns :     T\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Observable } from 'rxjs';\n\n/**\n * @description\n * Subscribes to a given observable and tracks all observations.\n */\nexport class SpyObserver {\n    /**\n     * @description\n     * jasmine spy that will be called when the observable emits a value.\n     * Can be uses like this: expect(observer.next).toHaveBeenCalledWith(expectedValue);\n     */\n    public readonly next: jasmine.Spy;\n     /**\n     * @description\n     * jasmine spy that will be called when the observable throws an error\n     * Can be uses like this: expect(observer.next).toHaveBeenCalledWith(expectedError);\n     */\n    public readonly error: jasmine.Spy;\n    /**\n     * @description\n     * jasmine spy that will be called when the observable completes\n     * Can be uses like this: expect(observer.complete).toHaveBeenCalled();\n     */\n    public readonly complete: jasmine.Spy;\n    /**\n     * @description\n     * When the observable emits a value, it will be pushed onto this array.\n     */\n    public readonly observations: Array = [];\n     /**\n     * @description\n     * refers to the latest emitted value of the observable.\n     */\n    public get latest(): T {\n        return this.observations[this.observations.length - 1];\n    }\n    /**\n     * @param observable\n     * The observable that you want to spy with this observer instance.\n     * @param name\n     * Optional name that prefixes all jasmine spies that are created by the observer. This makes it easier to read the\n     * test output if anything fails.\n     */\n    constructor(observable: Observable, name?: string) {\n        const prefix = name ? name + '.' : '';\n        this.next = jasmine.createSpy(prefix + 'next');\n        this.error = jasmine.createSpy(prefix + 'error');\n        this.complete = jasmine.createSpy(prefix + 'complete:');\n        this.observations = new Array();\n        observable.subscribe(next => {\n            this.observations.push(next);\n            this.next(next);\n        }, this.error, this.complete);\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                projects/ng-magic-test-bed/src/karmaTest.ts\n            \n            variable\n            context\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/ng-magic-test-bed/src/karmaTest.ts\n            \n            variable\n            require\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/ng-magic-test-bed/src/observe/observe.function.ts\n            \n            function\n            observe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/ng-magic-test-bed/src/observe/spy-observer.class.ts\n            \n            class\n            SpyObserver\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                projects/ng-magic-test-bed/src/spy-on-functions/spy-on-function-of.function.ts\n            \n            function\n            spyOnFunctionOf\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/ng-magic-test-bed/src/spy-on-functions/spy-on-functions-of.function.ts\n            \n            function\n            getMethodKeysFromObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/ng-magic-test-bed/src/spy-on-functions/spy-on-functions-of.function.ts\n            \n            function\n            spyOnFunctionsOf\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/ng-magic-test-bed/src/spy-on-functions/spy-on-own-functions-of.function.ts\n            \n            function\n            spyOnOwnFunctionsOf\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/ng-magic-test-bed/src/test-bed/ng-magic-setup-test-bed.class.ts\n            \n            class\n            NgMagicSetupTestBed\n            \n                28 %\n                (14/49)\n            \n        \n        \n            \n                \n                projects/ng-magic-test-bed/src/test-bed/ng-magic-setup-test-bed.class.ts\n            \n            interface\n            IFactory\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~9.0.0\n        \n            @angular/common : ~9.0.0\n        \n            @angular/compiler : ~9.0.0\n        \n            @angular/core : ~9.0.0\n        \n            @angular/forms : ~9.0.0\n        \n            @angular/platform-browser : ~9.0.0\n        \n            @angular/platform-browser-dynamic : ~9.0.0\n        \n            @angular/router : ~9.0.0\n        \n            @compodoc/compodoc : ^1.1.10\n        \n            core-js : ^2.5.4\n        \n            rxjs : ~6.5.4\n        \n            tslib : ^1.10.0\n        \n            zone.js : ~0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getMethodKeysFromObject   (projects/.../spy-on-functions-of.function.ts)\n                        \n                        \n                            observe   (projects/.../observe.function.ts)\n                        \n                        \n                            spyOnFunctionOf   (projects/.../spy-on-function-of.function.ts)\n                        \n                        \n                            spyOnFunctionsOf   (projects/.../spy-on-functions-of.function.ts)\n                        \n                        \n                            spyOnOwnFunctionsOf   (projects/.../spy-on-own-functions-of.function.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/ng-magic-test-bed/src/spy-on-functions/spy-on-functions-of.function.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getMethodKeysFromObject\n                        \n                        \n                    \n                \n            \n            \n                \ngetMethodKeysFromObject(obj: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            spyOnFunctionsOf\n                        \n                        \n                    \n                \n            \n            \n                \nspyOnFunctionsOf(target: any, source?: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        target's methods will be overwritten with spies. Inherited methods will be overwritten at target object and not\non the prototype. This avoids unpleasant side effects.\n\n                                    \n                                \n                                \n                                    source\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        this optional paramter can be used to create additional spies at the target object. For each method on \nsource and its prototypes a spy will be created on the target.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    projects/ng-magic-test-bed/src/observe/observe.function.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            observe\n                        \n                        \n                    \n                \n            \n            \n                \nobserve(observable, name?)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    observable\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Observable you want to spy\n\n                                    \n                                \n                                \n                                    name\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Optional name that prefixes all jasmine spies that are created by the observer. This makes it easier to read the\ntest output if anything fails.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    projects/ng-magic-test-bed/src/spy-on-functions/spy-on-function-of.function.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            spyOnFunctionOf\n                        \n                        \n                    \n                \n            \n            \n                \nspyOnFunctionOf(target: any, key)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    projects/ng-magic-test-bed/src/spy-on-functions/spy-on-own-functions-of.function.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            spyOnOwnFunctionsOf\n                        \n                        \n                    \n                \n            \n            \n                \nspyOnOwnFunctionsOf(target)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNgMagicTestBedPresentation\nThis project was generated with Angular CLI version 7.0.5.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\nnpm run test:lib\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgMagicTetBedModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            context   (projects/.../karmaTest.ts)\n                        \n                        \n                            require   (projects/.../karmaTest.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/ng-magic-test-bed/src/karmaTest.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require.context('./', true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
